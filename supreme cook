import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import os


def reverse_bits(byte):
    """Reverse the bits in a single byte (8 bits)."""
    reversed_byte = 0
    for i in range(8):
        if byte & (1 << i):
            reversed_byte |= (1 << (7 - i))
    return reversed_byte


def generate_xbm_data(ttf_path, char_list, forced_height, max_width, canvas_width, canvas_height,
                      threshold_value=128, padding_top=0, padding_bottom=0):
    """
    Generates XBM data for characters, ensuring proper padding and alignment.
    Handles punctuation scaling, narrow characters, and top-left alignment for 32x64 canvases.
    """
    font_size = forced_height * 2
    font = ImageFont.truetype(ttf_path, font_size)
    all_xbm_data = {}

    # Define punctuation and narrow characters with special scaling
    punctuation_set = {',', '.'}
    punctuation_scale = 0.25  # Punctuation is 25% of the height of regular characters
    narrow_chars = {"I"}  # Characters with narrow proportions
    narrow_char_scale = 0.5  # Scale width for narrow characters to half the default

    for char in char_list:
        try:
            # Handle the space character explicitly
            if char == " ":
                binary_array = np.zeros((forced_height, max_width), dtype=np.uint8)  # Blank space
                padded_array = np.zeros((canvas_height, canvas_width), dtype=np.uint8)
                if canvas_width == 32 and canvas_height == 64:
                    # Place the blank space at the top-left for 32x64 canvas
                    padded_array[:binary_array.shape[0], :binary_array.shape[1]] = binary_array
                else:
                    # Center for other canvas sizes
                    vertical_start = padding_top
                    horizontal_padding = (canvas_width - max_width) // 2
                    padded_array[vertical_start:vertical_start + forced_height,
                                 horizontal_padding:horizontal_padding + max_width] = binary_array

                # Convert to XBM format
                xbm_data = [
                    [reverse_bits(padded_array[row, col:col + 8].dot(1 << np.arange(7, -1, -1)))
                     for col in range(0, canvas_width, 8)]
                    for row in range(canvas_height)
                ]
                all_xbm_data[char] = xbm_data
                continue

            # Render the character
            (width, height), (offset_x, offset_y) = font.font.getsize(char)
            if width == 0 or height == 0:
                print(f"Warning: Character '{char}' has zero dimensions. Skipping.")
                continue

            image = Image.new('L', (width, height), 0)
            draw = ImageDraw.Draw(image)
            draw.text((-offset_x, -offset_y), char, font=font, fill=255)

            # Determine target height and width scaling
            if char in punctuation_set:
                target_height = int(forced_height * punctuation_scale)
                aspect_ratio = width / height
                scaled_width = min(int(target_height * aspect_ratio), max_width)
            elif char in narrow_chars:
                target_height = forced_height
                aspect_ratio = width / height
                scaled_width = min(int(target_height * aspect_ratio * narrow_char_scale), max_width)
            else:
                target_height = forced_height
                aspect_ratio = width / height
                scaled_width = min(int(target_height * aspect_ratio), max_width)

            # Resize the character bitmap
            img_resized = image.resize((scaled_width, target_height), Image.Resampling.LANCZOS)

            # Convert to binary array
            binary_array = (np.array(img_resized) > threshold_value).astype(np.uint8)

            # Crop non-empty pixels for 32x64 canvas only
            if canvas_width == 32 and canvas_height == 64:
                non_empty_rows = np.where(binary_array.any(axis=1))[0]
                non_empty_cols = np.where(binary_array.any(axis=0))[0]

                if len(non_empty_rows) > 0 and len(non_empty_cols) > 0:
                    binary_array = binary_array[
                        non_empty_rows.min():non_empty_rows.max() + 1,
                        non_empty_cols.min():non_empty_cols.max() + 1,
                    ]

            # Create padded array
            padded_array = np.zeros((canvas_height, canvas_width), dtype=np.uint8)

            # Alignment for 32x64 canvas
            if canvas_width == 32 and canvas_height == 64:
                padded_array[padding_top:padding_top + binary_array.shape[0], :binary_array.shape[1]] = binary_array
            else:
                # Center vertically and horizontally for 16x32 or other sizes
                vertical_start = padding_top
                horizontal_padding = (canvas_width - scaled_width) // 2
                padded_array[vertical_start:vertical_start + target_height,
                             horizontal_padding:horizontal_padding + scaled_width] = binary_array

            # Convert each row to multiple bytes (16 or 32 bits)
            xbm_data = []
            for row in padded_array:
                row_bytes = []
                for byte_index in range(0, canvas_width, 8):  # Process 8 bits (1 byte) at a time
                    byte = 0
                    for bit_index in range(8):
                        col = byte_index + bit_index
                        if col < canvas_width and row[col]:
                            byte |= (1 << (7 - bit_index))
                    # Reverse bits for compatibility
                    row_bytes.append(reverse_bits(byte))
                xbm_data.append(row_bytes)

            all_xbm_data[char] = xbm_data

        except Exception as e:
            print(f"Warning: Unable to process character '{char}'. Reason: {e}")

    return all_xbm_data

def write_xbm(all_xbm_data, output_file, canvas_width, canvas_height):
    """
    Writes XBM data to a file in the desired format, explicitly appending the space character at the end.
    """
    with open(output_file, "w", encoding="utf-8") as f:
        f.write("# XBM File\n\n")

        for char, xbm_data in all_xbm_data.items():
            f.write(f"/* Character: '{char}' */\n")
            f.write(f"#define {char}_width {canvas_width}\n")
            f.write(f"#define {char}_height {canvas_height}\n")
            f.write(f"static char {char}_bits[] = {{\n")

            for row_bytes in xbm_data:
                f.write("  " + ", ".join(f"0x{byte:02X}" for byte in row_bytes) + ",\n")

            f.write("};\n\n")

        # Explicitly append the space character at the end
        f.write("/* Character: ' ' (space) */\n")
        f.write(f"#define SPACE_width {canvas_width}\n")
        f.write(f"#define SPACE_height {canvas_height}\n")
        f.write("static char SPACE_bits[] = {\n")

        for _ in range(canvas_height):
            f.write("  " + ", ".join("0x00" for _ in range(canvas_width // 8)) + ",\n")

        f.write("};\n\n")

    print(f"XBM file saved as {output_file}")


def write_mif(all_xbm_data, output_file, canvas_width, canvas_height):
    depth = 8192 if canvas_width == 16 and canvas_height == 32 else 16834
    def add_strikeout(xbm_data, canvas_height):
        strikeout_data = []
        middle_row = canvas_height // 2  # Find the middle row for strikeout
        for i, row_bytes in enumerate(xbm_data):
            if i == middle_row:  # Add strikeout on the middle row
                            row_bytes = [(0xFF >> (8 - (canvas_width % 8))) if j == (len(row_bytes) - 1) and (canvas_width % 8) != 0 else 0xFF for j in range(len(row_bytes))]

            strikeout_data.append(row_bytes)
        return strikeout_data
    

    with open(output_file, "w", encoding="utf-8") as f:
        # Write MIF header
        f.write(f"DEPTH = {depth}];\n")
        f.write(f"WIDTH = {canvas_width};\n")
        f.write("ADDRESS_RADIX = HEX;\n")
        f.write("DATA_RADIX = HEX;\n")
        f.write("CONTENT BEGIN\n\n")

        # Non-strikeout characters start at 0x0000
        address = 0x0000
        num_characters = len(all_xbm_data)

        for char, xbm_data in all_xbm_data.items():
            f.write(f"-- Character: '{char}'\n")
            for row_bytes in xbm_data:
                word = "".join(f"{byte:02X}" for byte in row_bytes)
                f.write(f"{address:04X} : {word};\n")
                address += 1

        # Calculate starting address for strikeout characters
        strikeout_start = num_characters * canvas_height
        address = strikeout_start

        for char, xbm_data in all_xbm_data.items():
            f.write(f"-- Strikeout Character: '{char}'\n")
            strikeout_data = add_strikeout(xbm_data, canvas_height)
            for row_bytes in strikeout_data:
                word = "".join(f"{byte:02X}" for byte in row_bytes)
                f.write(f"{address:04X} : {word};\n")
                address += 1

        f.write("END;\n")
    print(f"MIF file saved as {output_file}")




# def main():
#     ttf_path = r"c:\WINDOWS\Fonts\CAMBRIA.TTC"  # Path to font
#     char_list = (
#         [chr(i) for i in range(0x20, 0x61)] +  
#         [
#             chr(0x7B), chr(0x7C), chr(0x7D), chr(0x7E), chr(0xB0), chr(0xB1),
#             chr(0x2026),chr(0x2190), chr(0x2191), chr(0x2192), chr(0x2193),
#             chr(0x21CC), chr(0x25BC), chr(0x2713), chr(0x20)
#         ]
#     )

#     output_dir = r"C:\Users\theda\OneDrive\Desktop\out_test"  # Output directory

#     # Configuration
#     forced_height = 39
#     max_width = 17
#     canvas_width =32  # Canvas width in bits
#     canvas_height = 64  # Canvas height in rows
#     padding_top = 0
#     padding_bottom = 2


#     # # Configuration
#     # forced_height = 28
#     # max_width = 13
#     # canvas_width =16  # Canvas width in bits
#     # canvas_height = 32  # Canvas height in rows
#     # padding_top = 2
#     # padding_bottom = 2

 
#     # Generate data
#     os.makedirs(output_dir, exist_ok=True)
#     xbm_data = generate_xbm_data(ttf_path, char_list, forced_height, max_width, canvas_width, canvas_height,
#                                   padding_top=padding_top, padding_bottom=padding_bottom)

#     # Write XBM and MIF files
#     write_xbm(xbm_data, os.path.join(output_dir, f"FontRom{canvas_height}.xbm"), canvas_width, canvas_height)
#     write_mif(xbm_data, os.path.join(output_dir, f"FontRom{canvas_height}.mif"), canvas_width, canvas_height)


# if __name__ == "__main__":
#     main()


# GUI Functionality
def browse_ttf_path(entry):
    path = filedialog.askopenfilename(filetypes=[("Font Files", "*.ttf;*.ttc")])
    if path:
        entry.delete(0, tk.END)
        entry.insert(0, path)

def browse_output_dir(entry):
    path = filedialog.askdirectory()
    if path:
        entry.delete(0, tk.END)
        entry.insert(0, path)

def generate_files():
    try:
        # Get inputs
        ttf_path = ttf_entry.get()
        output_dir = output_dir_entry.get()
        
        forced_height_32x64 = int(forced_height_32x64_entry.get())
        max_width_32x64 = int(max_width_32x64_entry.get())
        padding_top_32x64 = int(padding_top_32x64_entry.get())
        padding_bottom_32x64 = int(padding_bottom_32x64_entry.get())

        forced_height_16x32 = int(forced_height_16x32_entry.get())
        max_width_16x32 = int(max_width_16x32_entry.get())
        padding_top_16x32 = int(padding_top_16x32_entry.get())
        padding_bottom_16x32 = int(padding_bottom_16x32_entry.get())

        # Validate paths
        if not os.path.exists(ttf_path):
            messagebox.showerror("Error", "Invalid TTF font path.")
            return
        if not os.path.exists(output_dir):
            messagebox.showerror("Error", "Invalid output directory path.")
            return

        # Character list
        char_list = (
            [chr(i) for i in range(0x20, 0x61)] +  
            [
                chr(0x7B), chr(0x7C), chr(0x7D), chr(0x7E), chr(0xB0), chr(0xB1),
                chr(0x2026),chr(0x2190), chr(0x2191), chr(0x2192), chr(0x2193),
                chr(0x21CC), chr(0x25BC), chr(0x2713), chr(0x20)
            ]
        )

        # Create output directory if not exists
        os.makedirs(output_dir, exist_ok=True)

        # Generate 32x64 files
        xbm_data_32x64 = generate_xbm_data(ttf_path, char_list, forced_height_32x64, max_width_32x64, 32, 64, padding_top=padding_top_32x64, padding_bottom=padding_bottom_32x64)
        write_xbm(xbm_data_32x64, os.path.join(output_dir, "FontRom32x64.xbm"), 32, 64)
        write_mif(xbm_data_32x64, os.path.join(output_dir, "FontRom32x64.mif"), 32, 64)

        # Generate 16x32 files
        xbm_data_16x32 = generate_xbm_data(ttf_path, char_list, forced_height_16x32, max_width_16x32, 16, 32, padding_top=padding_top_16x32, padding_bottom=padding_bottom_16x32)
        write_xbm(xbm_data_16x32, os.path.join(output_dir, "FontRom16x32.xbm"), 16, 32)
        write_mif(xbm_data_16x32, os.path.join(output_dir, "FontRom16x32.mif"), 16, 32)

        messagebox.showinfo("Success", "Files generated successfully!")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

# GUI
root = tk.Tk()
root.title("Font to XBM/MIF Converter")

# TTF Path
ttf_label = tk.Label(root, text="TTF Font Path:")
ttf_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
ttf_entry = tk.Entry(root, width=50)
ttf_entry.grid(row=0, column=1, padx=5, pady=5)
ttf_browse = tk.Button(root, text="Browse", command=lambda: browse_ttf_path(ttf_entry))
ttf_browse.grid(row=0, column=2, padx=5, pady=5)

# Output Directory
output_dir_label = tk.Label(root, text="Output Directory:")
output_dir_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")
output_dir_entry = tk.Entry(root, width=50)
output_dir_entry.grid(row=1, column=1, padx=5, pady=5)
output_dir_browse = tk.Button(root, text="Browse", command=lambda: browse_output_dir(output_dir_entry))
output_dir_browse.grid(row=1, column=2, padx=5, pady=5)

# 32x64 Configuration
config_32x64_label = tk.Label(root, text="32x64 Configuration:", font=("Arial", 12, "bold"))
config_32x64_label.grid(row=2, column=0, columnspan=3, pady=(10, 5))

forced_height_32x64_label = tk.Label(root, text="Forced Height:")
forced_height_32x64_label.grid(row=3, column=0, padx=5, pady=5, sticky="e")
forced_height_32x64_entry = tk.Entry(root)
forced_height_32x64_entry.insert(0, "39")
forced_height_32x64_entry.grid(row=3, column=1, padx=5, pady=5)

max_width_32x64_label = tk.Label(root, text="Max Width:")
max_width_32x64_label.grid(row=4, column=0, padx=5, pady=5, sticky="e")
max_width_32x64_entry = tk.Entry(root)
max_width_32x64_entry.insert(0, "17")
max_width_32x64_entry.grid(row=4, column=1, padx=5, pady=5)

padding_top_32x64_label = tk.Label(root, text="Padding Top:")
padding_top_32x64_label.grid(row=5, column=0, padx=5, pady=5, sticky="e")
padding_top_32x64_entry = tk.Entry(root)
padding_top_32x64_entry.insert(0, "0")
padding_top_32x64_entry.grid(row=5, column=1, padx=5, pady=5)

padding_bottom_32x64_label = tk.Label(root, text="Padding Bottom:")
padding_bottom_32x64_label.grid(row=6, column=0, padx=5, pady=5, sticky="e")
padding_bottom_32x64_entry = tk.Entry(root)
padding_bottom_32x64_entry.insert(0, "2")
padding_bottom_32x64_entry.grid(row=6, column=1, padx=5, pady=5)

# 16x32 Configuration
config_16x32_label = tk.Label(root, text="16x32 Configuration:", font=("Arial", 12, "bold"))
config_16x32_label.grid(row=7, column=0, columnspan=3, pady=(10, 5))

forced_height_16x32_label = tk.Label(root, text="Forced Height:")
forced_height_16x32_label.grid(row=8, column=0, padx=5, pady=5, sticky="e")
forced_height_16x32_entry = tk.Entry(root)
forced_height_16x32_entry.insert(0, "28")
forced_height_16x32_entry.grid(row=8, column=1, padx=5, pady=5)

max_width_16x32_label = tk.Label(root, text="Max Width:")
max_width_16x32_label.grid(row=9, column=0, padx=5, pady=5, sticky="e")
max_width_16x32_entry = tk.Entry(root)
max_width_16x32_entry.insert(0, "13")
max_width_16x32_entry.grid(row=9, column=1, padx=5, pady=5)

padding_top_16x32_label = tk.Label(root, text="Padding Top:")
padding_top_16x32_label.grid(row=10, column=0, padx=5, pady=5, sticky="e")
padding_top_16x32_entry = tk.Entry(root)
padding_top_16x32_entry.insert(0, "2")
padding_top_16x32_entry.grid(row=10, column=1, padx=5, pady=5)

padding_bottom_16x32_label = tk.Label(root, text="Padding Bottom:")
padding_bottom_16x32_label.grid(row=11, column=0, padx=5, pady=5, sticky="e")
padding_bottom_16x32_entry = tk.Entry(root)
padding_bottom_16x32_entry.insert(0, "2")
padding_bottom_16x32_entry.grid(row=11, column=1, padx=5, pady=5)

# Generate Button
generate_button = tk.Button(root, text="Generate Files", command=generate_files)
generate_button.grid(row=12, column=0, columnspan=3, pady=10)

root.mainloop()
