from PIL import Image, ImageDraw, ImageFont
import numpy as np
import os

# Assume `reverse_bits` and `strikeout_data` are defined elsewhere in your code
def reverse_bits(byte):
    return int('{:08b}'.format(byte)[::-1], 2)

def strikeout_data(data, width):
    """ Adds a strikeout line across the 7th and 8th row of character data. """
    if len(data) >= 8:
        data[6] = 0xFF  # Add strikeout in the 7th row
        data[7] = 0xFF  # Add strikeout in the 8th row
    return data

def ttf_to_xbm_combined(ttf_path, char_list, forced_height_1, forced_height_2, max_width=7, threshold_value=128, 
                        output_file="output_combined.xbm", padding_top=0, bottom_padding_1=0, bottom_padding_2=0):
    """
    Converts a list of characters from a TTF file to XBM format with dual heights and strikeout options. 
    The XBM file contains each character's regular and strikeout data for both heights in sequence.
    """
    # Load the font with an arbitrary size; we'll scale each character to the forced heights
    font_size = max(forced_height_1, forced_height_2) * 2
    font = ImageFont.truetype(ttf_path, font_size)

    # Prepare the output file with UTF-8 encoding to handle Unicode characters
    with open(output_file, "w", encoding="utf-8") as f:
        # Write the initial XBM file header
        f.write("# Combined XBM file with dual heights and strikeout versions\n\n")

        for char in char_list:
            # Skip space if empty but ensure `0x20` is included
            if char == ' ':
                char = chr(0x20)  # Ensure space character is processed as well

            for height, bottom_padding in [(forced_height_1, bottom_padding_1), (forced_height_2, bottom_padding_2)]:
                # Render character
                (width, actual_height), (offset_x, offset_y) = font.font.getsize(char)
                
                if actual_height == 0 or width == 0:
                    print(f"Warning: Character '{char}' rendered with zero height or width. Skipping.")
                    continue
                
                image = Image.new('L', (width, actual_height), 0)
                draw = ImageDraw.Draw(image)
                draw.text((-offset_x, -offset_y), char, font=font, fill=255)
                
                total_height = height + padding_top + bottom_padding
                aspect_ratio = image.width / image.height
                new_width = min(int(height * aspect_ratio), max_width)
                img_resized = image.resize((new_width, height), Image.Resampling.LANCZOS)

                resized_array = np.array(img_resized)
                binary_array = (resized_array > threshold_value).astype(np.uint8)

                padded_array = np.zeros((total_height, 8), dtype=np.uint8)
                start_col = (8 - new_width) // 2
                start_row = padding_top

                padded_array[start_row:start_row + height, start_col:start_col + new_width] = binary_array[:, :new_width]

                # Regular and strikeout data generation
                for variant, variant_label in [(padded_array, "normal"), (strikeout_data(padded_array.copy(), new_width), "strikeout")]:
                    xbm_data = []
                    for row in variant:
                        byte_value = 0
                        for col in range(8):
                            if row[col] > 0:
                                byte_value |= (1 << (7 - col))
                        xbm_data.append(reverse_bits(byte_value))  # Apply reverse_bits here

                    f.write(f"/* Character: '{char}', Height: {total_height}, Variant: {variant_label} */\n")
                    f.write(f"#define {char}_width 8\n")
                    f.write(f"#define {char}_height {total_height}\n")
                    f.write(f"static char {char}_bits_height_{height}_{variant_label}[] = {{\n")
                    
                    for i, byte in enumerate(xbm_data):
                        f.write(f"  0x{byte:02X}")
                        if i < len(xbm_data) - 1:
                            f.write(",")
                        if (i + 1) % 12 == 0:
                            f.write("\n")
                        else:
                            f.write(" ")
                    f.write("\n};\n\n")

    print(f"Combined XBM file saved as {output_file}")

# Example usage
ttf_path = "path_to_your_font.ttf"
char_list = [chr(i) for i in range(0x20, 0x7F)]  # Include space and printable ASCII characters
ttf_to_xbm_combined(ttf_path, char_list, forced_height_1=14, forced_height_2=13, max_width=7, 
                    output_file="combined.xbm", padding_top=1, bottom_padding_1=1, bottom_padding_2=2)
